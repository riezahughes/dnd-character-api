scalar DateTime

type Character{
  id: Int!
  createdAt: DateTime!
  name: String!
  race:  Race!
  class: Class!
  alignment: String
  experience: Int
  background: String
  personality: String
  ideals: String
  bonds: String
  flaw: String
  hp: Int!
  temphp: Int
  maxhp: Int!
  strength: Int!
  dexterity: Int!
  intelligence: Int!
  wisdom: Int!
  charisma: Int!
  age: Int
  size: String
  height: String
  weight: String
  eyes: String
  skin: String
  hair: String
  appearance: String
  allies_org: String
  backstory: String
  treasure: String
  equipment: [CharacterEquipment]!
  feats: [CharacterFeat]
  skills: [CharacterSkill]
  spells: [CharacterSpell]
  diety: Deity
}

type CharacterEquipment{
  id: Int!
  character: Character!
  item: Equipment!
}

type CharacterSpell{
  id: Int!
  character: Character!
  spell: Spell!
}

type CharacterFeat{
  id: Int!
  character: Character
  feats: [Feat]
}

type CharacterSkill{
  id: Int!
  character: Character!
  skill: Skill!
  proficient: Boolean
}

type Equipment{
  id: Int!
  name: String!
  type: String!
  goldworth: String!
  weight: String!
  description: String!
}

input EquipmentInput{
  name: String!
  type: String!
  goldworth: String!
  weight: String!
  description: String!
}

type Race{
  id: Int!
  name: String!
  traits: [Trait]
}

input RaceInput{
  name: String!
  traits: [TraitInput]
}

type Class{
  id: Int!
  name: String!
  hitdice: String!
  hpfirstlevel: Int!
  hpperlevel: Int!
  hpperlevel_roll: Int!
  proficiencies: [Proficiency]
  classfeatures: [ClassFeature]
  classresources: [ClassResource]
}

input ClassInput{
  name: String!
  hitdice: String!
  hpfirstlevel: Int!
  hpperlevel: Int!
  hpperlevel_roll: Int!
  proficiencies: [ProficiencyInput]
  classfeatures: [ClassFeatureInput]
  classresources: [ClassResourceInput]
}

type ClassResource{
  id: Int!
  class: Class!
  name: String!
  level: Int!
  value: String!
}

input ClassResourceInput{
  class: ClassInput!
  name: String!
  level: Int!
  value: String!
}

type ClassFeature{
  id: Int!
  class: Class!
  name: String!
  level: Int!
  description: String!
}

input ClassFeatureInput{
  class: ClassInput!
  name: String!
  level: Int!
  description: String!  
}

type SubClass{
  id: Int!
  name: String!
  class: Class!
}

input SubClassInput{
  name: String!
  class: ClassInput!
}

type Skill{
  id: Int!
  name: String!
  description: String!
  statroll: String!
}

input SkillInput{
  name: String!
  description: String!
  statroll: String!  
}

type Condition{
  id: Int!
  type: String!
  name: String!
  description: String!
  source: DataResource!
}

input ConditionInput{
  id: Int!
  type: String!
  name: String!
  description: String!
  source: DataResourceInput!
}

type Background{
  id: Int!
  name: String!
  skillproficiencies: String!
  source: DataResource!
}

input BackgroundInput{
  name: String!
  skillproficiencies: String!
  source: DataResourceInput!
}

type Language{
  id: Int!
  name: String!
  type: String!
  script: String!
  source: DataResource!
}

input LanguageInput{
  name: String!
  type: String!
  script: String!
  source: DataResourceInput!
}

type Feat{
  id: Int!
  name: String!
  ability: String
  prerequisite: String
  description: String!
  source: DataResource!
}

input FeatInput{
  name: String!
  ability: String
  prerequisite: String
  description: String!
  source: DataResourceInput!
}

type Spell{
  id: Int!
  name: String!
  class: Class!
  level: Int!
  time: String!
  school: SpellSchool!
  concentration: Boolean
  range: String!
  source: DataResource!
}

input SpellInput{
  name: String!
  class: ClassInput!
  level: Int!
  time: String!
  school: SpellSchoolInput!
  concentration: Boolean
  range: String!
  source: DataResourceInput!  
}

type SpellSchool{
  id: Int!
  name: String!
  summary: String!
  description: String!
}

input SpellSchoolInput{
  name: String!
  summary: String!
  description: String!
}

type Psyonic{
  id: Int!
  name: String!
  type: String!
  order: String!
  description: String!
  source: DataResource
}

input PsyonicInput{
  name: String!
  type: String!
  order: String!
  description: String!
  source: DataResourceInput
}


type Deity{
  id: Int!
  name: String!
  alignment: String!
  domains: String!
  pantheon: String!
  province: String!
  symbol: String
  description: String!
}

input DeityInput{
  name: String!
  alignment: String!
  domains: String!
  pantheon: String!
  province: String!
  symbol: String
  description: String!
}

type SupernaturalPassive{
  id: Int!
  type: String!
  name: String!
  description: String!
  source: DataResource
}

input SupernaturalPassiveInput{
  type: String!
  name: String!
  description: String!
  source: DataResourceInput
}

type Proficiency{
  id: Int!
  name: String!
  bonus: String
  attribute: String
  modifier: Int
  type: String!
}

input ProficiencyInput{
  name: String!
  bonus: String
  attribute: String
  modifier: Int
  type: String!
}

type Trait{
  id: Int!
  name: String!
  description: String!
  race: Race
}

input TraitInput{
  name: String!
  description: String!
  race: RaceInput
}

type DataResource{
  id: Int!
  name: String!
  acronym: String!
}

input DataResourceInput{
  name: String!
  acronym: String!
}

type Vehicle{
  id: Int!
  name: String!
  type: String!
  size: String!
  sizedimensions: String!
  creaturecapacity: String!
  cargocapacity: String!
  travelpace: String!
  speed: String!
  strength: Int
  strengthmod: Int
  dexterity: Int
  dexteritymod: Int
  constitution: Int
  constitutionmod: Int
  intelligence: Int
  intelligencemod: Int
  wisdom: Int
  wisdommod: Int
  charisma: Int
  charismamod: Int
  damageimmunities: String
  conditionimmunities: [Condition]
  vehicleactions: [VehicleAction]
  source: DataResource
}

input VehicleInput{
  name: String!
  type: String!
  size: String!
  sizedimensions: String!
  creaturecapacity: String!
  cargocapacity: String!
  travelpace: String!
  speed: String!
  strength: Int
  strengthmod: Int
  dexterity: Int
  dexteritymod: Int
  constitution: Int
  constitutionmod: Int
  intelligence: Int
  intelligencemod: Int
  wisdom: Int
  wisdommod: Int
  charisma: Int
  charismamod: Int
  damageimmunities: String
  conditionimmunities: [ConditionInput]
  vehicleactions: [VehicleActionInput]
  source: DataResourceInput
}

type VehicleAction{
  id: Int!
  vehicle: Vehicle
  name: String!
  description: String!
}

input VehicleActionInput{
  vehicle: VehicleInput
  name: String!
  description: String!
}

type DiceModifier{
  id: Int!
  name: String!
  scope: String!
  diceSides: Int!
  rolltype: String!
}

type Query{
    # single searches
    character(id: Int): Character
    race(name: String, id: Int): Race
    class(name: String, id: Int): Class
    dataresource(acronym: String, id: Int): DataResource
    language(name: String, id: Int): Language
    proficiency(name: String, id: Int): Proficiency
    equipmentsingle(name: String, id: Int): Equipment
    skill(name: String, id: Int): Skill
    condition(name: String, id: Int): Condition
    background(name: String, class: String, id: Int): Background
    feat(name: String, id: Int): Feat
    spell(name: String, id: Int): Spell
    spellschool(name: String, id: String): SpellSchool
    psyonic(name: String, id: String): Psyonic
    deity(name: String, id: String): Deity
    supernaturalpassive(name: String, id: String): SupernaturalPassive
    vehicle(name: String, id: String): Vehicle
    
    # everything searches
    characters: [Character]
    races: [Race]
    classes: [Class]
    dataresources: [DataResource]
    proficiencies: [Proficiency]
    equipmentmany: [Equipment]
    skills: [Skill]
    conditions: [Condition]
    backgrounds: [Background]
    languages: [Language]
    feats: [Feat]
    spells: [Spell]
    spellschools: [SpellSchool]
    psyonics: [Psyonic]
    deities: [Deity]
    supernaturalpassives: [SupernaturalPassive]
    vehicles: [Vehicle]
}

type Mutation{

    # createCharacter() - being left till last
    # updateCharacter() - being left till last
    # deleteCharacter() - being left till last

    createRace(name: String!, traits: [TraitInput]): Race
    updateRace(id: Int!, name: String, traits: [TraitInput]): Race
    deleteRace(id: Int!): Race

    createClass(name: String!, hitdice: String!, hpFirstLevel: Int!, hpperlevel: Int!, hpperlevel_roll: Int!, proficiencies: [ProficiencyInput!]!, classfeatures: [ClassFeatureInput!]!, classresources: [ClassResourceInput!]!): Class
    updateClass(id: Int! name: String, hitdice: String, hpFirstLevel: Int, hpperlevel: Int, hpperlevel_roll: Int, proficiencies: [ProficiencyInput], classfeatures: [ClassFeatureInput], classresources: [ClassResourceInput]): Class
    deleteClass(id: Int!): Class

    createDataResource(name: String!, acronym: String!): DataResource
    updateDataResource(id: Int!, name: String, acronym: String): DataResource
    deleteDataResource(id: Int!): DataResource

    createLanguage(name: String!, type: String!, script: String, source: DataResourceInput!): Language
    updateLanguage(id: Int!, name: String, type: String, script: String, source: DataResourceInput): Language
    deleteLanguage(id: Int!): Language

    createFeat(name: String!, abillity: String, prerequisite: String, description: String!, source: DataResourceInput!): Feat
    updateFeat(id: Int!, name: String, abillity: String, prerequisite: String, description: String, source: DataResourceInput): Feat
    deleteFeat(id: Int!): Feat

    createSpell(name: String!, level: Int!, time: String!, school: SpellSchoolInput!, concentration: Boolean, range: String!, class: ClassInput! source: DataResourceInput!): Spell
    updateSpell(id: Int!, name: String, level: Int, time: String, school: SpellSchoolInput, concentration: Boolean, range: String, class: ClassInput!, source: DataResourceInput): Spell
    deleteSpell(id: Int!): Spell

    createSpellSchool(name: String!, summay: String!, description: String!): SpellSchool
    updateSpellSchool(id: Int! name: String, summay: String, description: String): SpellSchool
    deleteSpellSchool(id: Int!): SpellSchool

    createPsyonic(name: String!, type: String!, order: String!, description: String!, source: DataResourceInput): Psyonic
    updatePsyonic(id: Int! name: String, type: String, order: String, description: String, source: DataResourceInput): Psyonic
    deletePsyonic(id: Int!): Psyonic

    createDeity(name: String!, alignment: String!, domains: String!, pantheon: String!, province: String!, symbol: String!, description: String!): Deity
    updateDeity(id: Int!, name: String, alignment: String, domains: String, pantheon: String, province: String, symbol: String, description: String): Deity
    deleteDeity(id: Int!): Deity

    createSupernaturalPassive(name: String!, type: String!, description: String!, source: DataResourceInput!): SupernaturalPassive
    updateSupernaturalPassive(id: Int!, name: String, type: String, description: String, source: DataResourceInput): SupernaturalPassive
    deleteSupernaturalPassive(id: Int!): SupernaturalPassive

    createProficiency(name: String!, bonus: String, attribute: String, modifier: Int, type: String!): Proficiency
    updateProficiency(id: Int!, name: String, bonus: String, attribute: String, modifier: Int, type: String): Proficiency
    deleteProficiency(id: Int!): Proficiency

    createTrait(name: String!, description: String!, race: RaceInput!, level: Int!): Trait
    updateTrait(id: Int!, name: String, description: String, race: RaceInput, level: Int): Trait
    deleteTrait(id: Int!): Trait

    createVehicle(
      name: String!,
      type: String!,
      size: String!,
      sizedimensions: String!,
      creaturecapacity: String!,
      cargocapacity: String!,
      travelpace: String!,
      speed: String!,
      strength: Int,
      strengthmod: Int,
      dexteritymod: Int,
      constitution: Int,
      constitutionmod: Int,
      intelligence: Int, 
      intelligencemod: Int,
      wisdom: Int,
      widsommod: Int,
      charisma: Int,
      charismamod: Int,
      damageimmunities: String,
      conditionimmunities: [ConditionInput]
      vehicleactions: [VehicleActionInput],
      source: DataResourceInput
    ): Vehicle

    updateVehicle(
      name: String!,
      type: String!,
      size: String!,
      sizedimensions: String!,
      creaturecapacity: String!,
      cargocapacity: String!,
      travelpace: String!,
      speed: String!,
      strength: Int,
      strengthmod: Int,
      dexteritymod: Int,
      constitution: Int,
      constitutionmod: Int,
      intelligence: Int, 
      intelligencemod: Int,
      wisdom: Int,
      widsommod: Int,
      charisma: Int,
      charismamod: Int,
      damageimmunities: String,
      conditionimmunities: [ConditionInput]
      vehicleactions: [VehicleActionInput],
      source: DataResourceInput
    ): Vehicle
    deleteVehicle( id: Int! ): Vehicle

    createVehicleAction(vehicle: VehicleInput, name: String!, description: String!): VehicleAction
    updateVehicleAction(id: Int, vehicle: VehicleInput, name: String!, description: String!): VehicleAction
    deleteVehicleAction(id: Int!): VehicleAction
}